
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// User Model
model User {
  id              Int      @id @default(autoincrement())
  username        String
  email           String   @unique
  password        String?  
  phone           String?  
  googleId        String?  @unique // Google OAuth ID
  avatar          String?  
  isEmailVerified Boolean  @default(false)
  authProvider    String   @default("local") // "local", "google"
  resetPasswordOTP String? 
  resetPasswordOTPExpires DateTime? 
  resetPasswordToken String? 
  resetPasswordTokenExpires DateTime? 
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  payments Payment[]
  wishlists       Wishlist[]
  cartItems Cart[]
  enrollments Enrollment[]
  instructedCourses Course[] 
  paymentMethods PaymentMethod[]
  @@map("users")
}





// Course Location Enum
enum CourseLocation {
  ELEARNING
  ONSITE
  ONLINE
  HYBRID
}



// Course Model
model Course {
  id                Int             @id @default(autoincrement())
  image             String
  name_en           String
  name_ar           String
  duration_en       String
  duration_ar       String
  overview_en       String
  overview_ar       String
  objectives_en     String[]
  objectives_ar     String[]
  outcomes_en       String?
  outcomes_ar       String?
  agenda_en         Json?
  agenda_ar         Json?
  examination_en    String?
  examination_ar    String?
  accreditation_en  String
  features_en       String[]
  features_ar       String[]
  paymentMethods    String[]
  category          String
  level             String
  location          CourseLocation[]   
  delegatesEnrolled Int       @default(0)
  fees              Float?
  startDate         DateTime?
  endDate           DateTime?
  language          String[]          

  // Relations
  instructor     User?       @relation(fields: [instructorId], references: [id])
  instructorId   Int?
  payments       Payment[]
  enrollments    Enrollment[]
  wishlists      Wishlist[]
  cartItems      Cart[]

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@map("courses")
}




// Enrollment Mode Enum
enum EnrollmentMode {
  ELEARNING
  ONSITE
  ONLINE
  HYBRID
}


// Enrollment Model
model Enrollment {
  id           Int      @id @default(autoincrement())
  userId       Int
  courseId     Int
  enrolledAt   DateTime @default(now())
  status       String   @default("active") // "active", "completed", "dropped", "suspended"
  completedAt  DateTime?
  EnrollmentMode  EnrollmentMode 
  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Ensure a user can only enroll once per course
  @@unique([userId, courseId])
  @@map("enrollments")
}


// Payment Model
model Payment {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  amount    Float
  status    String   @default("pending") // "pending" or "success"
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@map("payments")
}

// PaymentMethod Model
model PaymentMethod {
  id             Int      @id @default(autoincrement())
  userId         Int
  method         String   @default("visa") 
  cardNumber     String?
  cvv            String?
  expiryDate     String?  // MM/YY
  cardHolderName String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("payment_methods")
}



model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId]) 
}

// Cart Model
model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("cart")
}
