generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int             @id @default(autoincrement())
  username                  String
  email                     String          @unique
  password                  String?
  phone                     String?
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  authProvider              String          @default("local")
  avatar                    String?
  googleId                  String?         @unique
  isEmailVerified           Boolean         @default(false)
  resetPasswordOTP          String?
  resetPasswordOTPExpires   DateTime?
  resetPasswordToken        String?
  resetPasswordTokenExpires DateTime?
  role                      UserRole        @default(STUDENT)
  wishlists                 Wishlist[]
  cartItems                 Cart[]
  enrollments               Enrollment[]
  instructor                Instructor?
  paymentMethods            PaymentMethod[]
  payments                  Payment[]
  examSubmissions ExamSubmission[]
  @@map("users")
}

model Instructor {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  bio               String?
  specialization    String?
  social            Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  certifications    String[] @default([])
  languages         String[] @default([])
  yearsOfExperience Int?
  courses           Course[]
  user              User     @relation(fields: [userId], references: [id])

  @@map("instructors")
}

model Course {
  id                 Int              @id @default(autoincrement())
  image              String
  name_en            String
  name_ar            String
  duration_en        String
  duration_ar        String
  overview_en        String?
  overview_ar        String?
  objectives_en      String[]
  objectives_ar      String[]
  outcomes_en        String[]
  outcomes_ar        String[]
  agenda_en          Json?
  agenda_ar          Json?
  examination_en     Json?
  examination_ar     Json?
  accreditation_en   String
  features_en        String[]
  features_ar        String[]
  includes_en        String[]         @default([])
  includes_ar        String[]         @default([])
  paymentMethods     String[]
  category           String
  level              String
  location           CourseLocation[]
  language           String[]
  type               CourseType       @default(PAID)
  fees               Float?
  discount           Int              @default(0)
  delegatesEnrolled  Int              @default(0)
  startDate          DateTime?
  endDate            DateTime?
  prerequisites_en   String[]
  prerequisites_ar   String[]
  whoShouldAttend_en String[]
  whoShouldAttend_ar String[]

  instructorId       Int?
  instructor         Instructor?      @relation(fields: [instructorId], references: [id])

  lectures           Lecture[]
  payments           Payment[]
  enrollments        Enrollment[]
  wishlists          Wishlist[]
  cartItems          Cart[]
  
  exams              Exam[]           

  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@map("courses")
}





model Lecture {
  id          Int     @id @default(autoincrement())
  number      Int
  duration    Int
  videoUrl    String?
  courseId    Int
  overview_ar String
  overview_en String
  title_ar    String
  title_en    String
  course      Course  @relation(fields: [courseId], references: [id])
}

model Enrollment {
  id             Int            @id @default(autoincrement())
  userId         Int
  courseId       Int
  enrolledAt     DateTime       @default(now())
  status         String         @default("active")
  completedAt    DateTime?
  EnrollmentMode EnrollmentMode
  course         Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Payment {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  amount    Float
  status    String   @default("pending")
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("payments")
}

model PaymentMethod {
  id             Int      @id @default(autoincrement())
  userId         Int
  method         String   @default("visa")
  cardNumber     String?
  cvv            String?
  expiryDate     String?
  cardHolderName String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])

  @@map("payment_methods")
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("cart")
}

enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum CourseLocation {
  ELEARNING
  ONSITE
  HYBRID
  ONLINE
}

enum CourseType {
  FREE
  PAID
}

enum EnrollmentMode {
  ELEARNING
  ONSITE
  HYBRID
  ONLINE
}


model Exam {
  id          Int      @id @default(autoincrement())
  courseId    Int
  title       String
  description String?
  duration    Int
  totalMarks  Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions   Question[]
  submissions ExamSubmission[] 
}

model Question {
  id            Int      @id @default(autoincrement())
  examId        Int
  text          String
  options       String[]
  correctAnswer String
  mark          Int
  exam          Exam @relation(fields: [examId], references: [id], onDelete: Cascade)
}



model ExamSubmission {
  id          Int      @id @default(autoincrement())
  userId      Int
  examId      Int
  score       Int      @default(0)
  submittedAt DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exam        Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@unique([userId, examId]) // prevent multiple submissions
}